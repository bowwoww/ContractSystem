using DataModel; using DataModel.Service; using GymSystem.Resources; using Humanizer.Localisation; using Microsoft.AspNetCore.Authentication.Cookies; using Microsoft.AspNetCore.StaticFiles; using Microsoft.EntityFrameworkCore; using System; using System.Threading.RateLimiting; using Google.Cloud.SecretManager.V1;   try {      var builder = WebApplication.CreateBuilder(args);       // 允許非本地     //builder.Services.AddCors(options =>     //{     //    options.AddPolicy("AllowFrontend",     //        policy =>     //        {     //            policy.WithOrigins("http://localhost:3000", "https://your-frontend-domain.com") // 准許的連線路徑     //                  .AllowAnyHeader()     //                  .AllowAnyMethod();     //        });     //});       // Add services to the container.     builder.Services.AddControllersWithViews();      //驗證中文化 (未生效)     builder.Services.AddRazorPages()         .AddDataAnnotationsLocalization(options =>         {             options.DataAnnotationLocalizerProvider = (type, factory) =>                 factory.Create(typeof(ValidationMessages));         });      string connectionString = Environment.GetEnvironmentVariable("DB_CONNECTION_STRING");       //If running in Google Cloud Run, fetch the connection string from Secret Manager     if (Environment.GetEnvironmentVariable("K_SERVICE") != null)     {         string projectId = "formal-province-472104-n4";         string secretId = "db-connection-string";         string secretVersionId = "latest";          var client = SecretManagerServiceClient.Create();         var secretVersionName = new SecretVersionName(projectId, secretId, secretVersionId);         var result = client.AccessSecretVersion(secretVersionName);         connectionString = result.Payload.Data.ToStringUtf8();     }       //資料庫連接     builder.Services.AddDbContext<AppDbContext>(options =>         options.UseSqlServer(             connectionString,             b => b.MigrationsAssembly("GymSystem")         )     );      // 服務     builder.Services.AddScoped<NotificationService>();     builder.Services.AddScoped<IDGenerateService>();      builder.Services.AddScoped<ContractDetailService>();      builder.Services.AddScoped<MemberDetailService>();
    builder.Services.AddScoped<LogService>();     //存取HttpContext     builder.Services.AddHttpContextAccessor();      //連線限制     builder.Services.AddRateLimiter(options =>     {         options.GlobalLimiter = PartitionedRateLimiter.Create<HttpContext, string>(context =>             RateLimitPartition.GetFixedWindowLimiter(                 partitionKey: context.Connection.RemoteIpAddress?.ToString() ?? "unknown",                 factory: _ => new FixedWindowRateLimiterOptions                 {                     PermitLimit = 60, // 每分鐘60次                     Window = TimeSpan.FromMinutes(1),                     QueueProcessingOrder = QueueProcessingOrder.OldestFirst,                     QueueLimit = 10                 }));     });      //驗證路由     builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)         .AddCookie(options =>         {             options.LoginPath = "/Home/Login";             options.LogoutPath = "/Home/Login";             options.AccessDeniedPath = "/Home/AccessDenied";         });        // 內部員工權限     builder.Services.AddAuthorization(options =>     {         options.AddPolicy("Staff", policy => policy.RequireClaim("MemberRole", new[] { "B", "C" }));     });      var app = builder.Build();      using (var scope = app.Services.CreateScope())     {         var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();         db.Database.Migrate();         DataModel.MetaData.SeedData.Initialize(scope.ServiceProvider);     }      // Configure the HTTP request pipeline.     if (!app.Environment.IsDevelopment())     {         app.UseExceptionHandler("/Home/Error");         // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.         app.UseHsts();     }      //驗證中文化 (未生效)     var supportedCultures = new[] { "zh-TW" };     app.UseRequestLocalization(new RequestLocalizationOptions     {         DefaultRequestCulture = new Microsoft.AspNetCore.Localization.RequestCulture("zh-TW"),         SupportedCultures = supportedCultures.Select(c => new System.Globalization.CultureInfo(c)).ToList(),         SupportedUICultures = supportedCultures.Select(c => new System.Globalization.CultureInfo(c)).ToList()     });      app.UseHttpsRedirection();     app.UseStaticFiles(new StaticFileOptions     {         ContentTypeProvider = new FileExtensionContentTypeProvider         {             Mappings = { [".avif"] = "image/avif" }         }     });     app.UseStaticFiles();      app.UseRouting();      //app.UseCors("AllowFrontend");      app.UseAuthentication();     app.UseAuthorization();      app.UseRateLimiter();      app.MapControllerRoute(         name: "default",         pattern: "{controller=Home}/{action=Index}/{id?}");        app.Run(); } catch (Exception ex) {     Console.WriteLine("Startup Exception: " + ex);     throw; }