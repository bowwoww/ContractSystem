// <auto-generated />
using System;
using DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250913072030_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataModel.Attendance", b =>
                {
                    b.Property<string>("AttendanceID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractID")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("MemberID")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("TrainerID")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("AttendanceID");

                    b.HasIndex("ContractID");

                    b.HasIndex("MemberID");

                    b.HasIndex("TrainerID");

                    b.ToTable("Attendances", (string)null);
                });

            modelBuilder.Entity("DataModel.Contract", b =>
                {
                    b.Property<string>("ContractID")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("ClassTypeID")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HandlerID")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("MemberID")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("PayTypeID")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("SignDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Signer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrainerID")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("ContractID");

                    b.HasIndex("ClassTypeID");

                    b.HasIndex("HandlerID");

                    b.HasIndex("MemberID");

                    b.HasIndex("PayTypeID");

                    b.HasIndex("TrainerID");

                    b.ToTable("Contracts", (string)null);
                });

            modelBuilder.Entity("DataModel.ContractEdit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddClassCount")
                        .HasColumnType("int");

                    b.Property<string>("ContractID")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditType")
                        .HasColumnType("int");

                    b.Property<string>("HandlerID")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime?>("NewEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TransferClassCount")
                        .HasColumnType("int");

                    b.Property<string>("TransferToMemberID")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("ContractID");

                    b.HasIndex("HandlerID");

                    b.ToTable("ContractEdits", (string)null);
                });

            modelBuilder.Entity("DataModel.KnowSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("KnowSources", (string)null);
                });

            modelBuilder.Entity("DataModel.Member", b =>
                {
                    b.Property<string>("MemberID")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LineID")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MemberAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("MemberBirthday")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MemberGender")
                        .HasColumnType("bit");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MemberPassword")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MemberRemark")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("MemberRole")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("MemberSource")
                        .HasColumnType("int");

                    b.Property<string>("MemberTel")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("MemberID");

                    b.HasIndex("MemberRole");

                    b.HasIndex("MemberSource");

                    b.ToTable("Members", (string)null);
                });

            modelBuilder.Entity("DataModel.MemberRole", b =>
                {
                    b.Property<string>("MemberRoleID")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("MemberRoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MemberRoleID");

                    b.ToTable("MemberRoles", (string)null);

                    b.HasData(
                        new
                        {
                            MemberRoleID = "A",
                            MemberRoleName = "會員"
                        },
                        new
                        {
                            MemberRoleID = "B",
                            MemberRoleName = "教練"
                        },
                        new
                        {
                            MemberRoleID = "C",
                            MemberRoleName = "後台"
                        });
                });

            modelBuilder.Entity("DataModel.PayType", b =>
                {
                    b.Property<string>("PayTypeID")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("PayTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PayTypeID");

                    b.ToTable("PayTypes", (string)null);
                });

            modelBuilder.Entity("DataModel.TrainingClass", b =>
                {
                    b.Property<string>("ClassTypeID")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("ClassDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ClassLength")
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClassTypeID");

                    b.ToTable("TrainingClasses", (string)null);
                });

            modelBuilder.Entity("DataModel.TrainingDate", b =>
                {
                    b.Property<string>("TrainingDateID")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("ClassDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ContractID")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("TrainerID")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("TrainingDateID");

                    b.HasIndex("ContractID");

                    b.HasIndex("TrainerID");

                    b.ToTable("TrainingDates", (string)null);
                });

            modelBuilder.Entity("DataModel.Attendance", b =>
                {
                    b.HasOne("DataModel.Contract", "Contract")
                        .WithMany("Attendances")
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModel.Member", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Member");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("DataModel.Contract", b =>
                {
                    b.HasOne("DataModel.TrainingClass", "TrainingClass")
                        .WithMany("Contracts")
                        .HasForeignKey("ClassTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.Member", "Handler")
                        .WithMany()
                        .HasForeignKey("HandlerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModel.Member", "Member")
                        .WithMany("Contracts")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModel.PayType", "PayType")
                        .WithMany("Contracts")
                        .HasForeignKey("PayTypeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataModel.Member", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Handler");

                    b.Navigation("Member");

                    b.Navigation("PayType");

                    b.Navigation("Trainer");

                    b.Navigation("TrainingClass");
                });

            modelBuilder.Entity("DataModel.ContractEdit", b =>
                {
                    b.HasOne("DataModel.Contract", "Contract")
                        .WithMany("ContractEdits")
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.Member", "Handler")
                        .WithMany()
                        .HasForeignKey("HandlerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Handler");
                });

            modelBuilder.Entity("DataModel.Member", b =>
                {
                    b.HasOne("DataModel.MemberRole", "MemberRoleNavigation")
                        .WithMany("Members")
                        .HasForeignKey("MemberRole")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataModel.KnowSource", "KnowSource")
                        .WithMany("Members")
                        .HasForeignKey("MemberSource")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("KnowSource");

                    b.Navigation("MemberRoleNavigation");
                });

            modelBuilder.Entity("DataModel.TrainingDate", b =>
                {
                    b.HasOne("DataModel.Contract", "Contract")
                        .WithMany("TrainingDates")
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.Member", "Member")
                        .WithMany("TrainingDates")
                        .HasForeignKey("TrainerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("DataModel.Contract", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("ContractEdits");

                    b.Navigation("TrainingDates");
                });

            modelBuilder.Entity("DataModel.KnowSource", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("DataModel.Member", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("TrainingDates");
                });

            modelBuilder.Entity("DataModel.MemberRole", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("DataModel.PayType", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("DataModel.TrainingClass", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
